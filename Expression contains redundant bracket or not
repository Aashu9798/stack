Given a string of balanced expression, find if it contains a redundant parenthesis or not. A set of parenthesis are redundant if the same sub-expression is surrounded by unnecessary or multiple brackets. Print Yes if redundant, else No.
Note: Expression may contain + , - , *, and / operators. Given expression is valid and there are no white spaces present.

Example 1:

Input:
exp = ((a+b))
Output:
Yes
Explanation:
((a+b)) can reduced to (a+b).
Example 2:

Input:
exp = (a+b+(c+d))
Output:
No
Explanation:
(a+b+(c+d)) doesn't have any redundant or multiple
brackets.
Your task:

You don't have to read input or print anything. Your task is to complete the function checkRedundancy() which takes the string s as input and returns 1 if it contains redundant parentheses else 0.

Constraints:

1<=|str|<=104

Expected Time Complexity: O(N)

Expected Auxiliary Space: O(N)



//   CODE :


class Solution {
  public:
    int checkRedundancy(string s) {
        // code here
        // stack<char>st;
        
        // for(int i=0; i<s.length(); i++){
        //     char ch = s[i];
            
        //     if(ch=='(' || ch=='+' || ch=='-' || ch=='*' || ch=='/'){
        //         st.push(ch);
        //     }
        //     else{
        //         if(ch=')'){
        //             bool isRedundant=true;
                    
        //             while(!st.empty() && st.top() != '('){       
        //                 char top = st.top();
                        
        //                 if(top=='+' || top=='-' || top=='*' || top=='/'){
        //                     isRedundant=false;
        //                 }
        //                 st.pop();
        //             }
        //             if(isRedundant==true){
        //                 return true;
        //             }
        //             st.pop();
        //         }
        //     }
        // }
        // return false;
        
        
        
        
        // stack<char> st;
        
        // for(int i=0; i<s.length(); i++){
        //     char ch = s[i];
            
        //     if(ch==')'){
        //         // Pop and check for redundancy
        //         bool hasOperator = false;
                
        //         while(!st.empty() && st.top()=='('){
        //             char top = st.top();
        //             if(top=='+' || top=='-' || top=='*' || top=='/'){
        //                 hasOperator = true;
        //             }
        //             st.pop();
        //         }
        //         st.pop();  // Pop the '('
                
        //         if(!hasOperator){
        //             return true;
        //         }
        //     }
        //     else{
        //         st.push(ch);
        //     }
        // }
        // return false;
        
        
        
        stack<char> st;

        for (int i = 0; i < s.length(); i++) {
            char ch = s[i];

            if (ch == ')') {
                // Check for redundant parentheses
                bool hasOperator = false;
                char top = st.top();
                st.pop(); // Pop the '('

                while (top != '(') {
                    if (top == '+' || top == '-' || top == '*' || top == '/') {
                        hasOperator = true;
                    }
                    top = st.top();
                    st.pop();
                }

                // If no operator found between '(' and ')', it's redundant
                if (!hasOperator) {
                    return true;
                }
            } else {
                st.push(ch);
            }
        }

        return false;
        
    }
};
